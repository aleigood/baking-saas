// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 核心权限与租户模型
// ==============================================================================

// 用户账户
model User {
  id        String       @id @default(uuid())
  phone     String       @unique
  password  String
  name      String?
  role      Role         @default(MEMBER)
  status    UserStatus   @default(ACTIVE)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  tenants   TenantUser[]
}

// 租户/店铺
model Tenant {
  id              String            @id @default(uuid())
  name            String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  members         TenantUser[]
  invitations     Invitation[]
  ingredients     Ingredient[]
  recipeFamilies  RecipeFamily[]
  productionTasks ProductionTask[]
}

// 租户成员 (用户与租户的多对多关系)
model TenantUser {
  role     Role       @default(MEMBER)
  status   UserStatus @default(PENDING)
  tenantId String
  tenant   Tenant     @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  userId   String
  user     User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([tenantId, userId])
}

// 邀请
model Invitation {
  id        String           @id @default(uuid())
  phone     String
  status    InvitationStatus @default(PENDING)
  tenantId  String
  tenant    Tenant           @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
}

// 配方核心模型
// ==============================================================================

// 配方族
model RecipeFamily {
  id             String              @id @default(uuid())
  name           String
  tenantId       String
  tenant         Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  type           RecipeType
  deletedAt      DateTime?
  versions       RecipeVersion[]
  usedInDoughs   DoughIngredient[]   @relation("PreDoughUsage")
  usedInProducts ProductIngredient[] @relation("ExtraUsage")

  @@unique([tenantId, name])
}

// 配方版本
model RecipeVersion {
  id       String    @id @default(uuid())
  familyId String
  family   RecipeFamily @relation(fields: [familyId], references: [id], onDelete: Cascade)
  version  Int
  notes    String?
  isActive Boolean   @default(true)
  doughs   Dough[]
  products Product[]
  // [V2.2 Fix] 移除此行以修复关系错误
  // productionTasks ProductionTask[]

  @@unique([familyId, version])
}

// 面团
model Dough {
  id              String            @id @default(uuid())
  recipeVersionId String
  recipeVersion   RecipeVersion     @relation(fields: [recipeVersionId], references: [id], onDelete: Cascade)
  name            String
  targetTemp      Float?
  lossRatio       Float             @default(0)
  procedure       String[]
  ingredients     DoughIngredient[]
}

// 面团原料
model DoughIngredient {
  id               String        @id @default(uuid())
  doughId          String
  dough            Dough         @relation(fields: [doughId], references: [id], onDelete: Cascade)
  name             String
  ratio            Float
  isFlour          Boolean       @default(false)
  waterContent     Float?        @default(0)
  linkedPreDoughId String?
  linkedPreDough   RecipeFamily? @relation("PreDoughUsage", fields: [linkedPreDoughId], references: [id], onDelete: SetNull)
}

// 最终产品
model Product {
  id                String              @id @default(uuid())
  recipeVersionId   String
  recipeVersion     RecipeVersion       @relation(fields: [recipeVersionId], references: [id], onDelete: Cascade)
  name              String
  baseDoughWeight   Float
  procedure         String[]
  ingredients       ProductIngredient[]
  productionTasks   ProductionTask[]
}

// 产品附加原料
model ProductIngredient {
  id            String        @id @default(uuid())
  productId     String
  product       Product       @relation(fields: [productId], references: [id], onDelete: Cascade)
  name          String
  type          ProductIngredientType
  ratio         Float?
  weightInGrams Float?
  linkedExtraId String?
  linkedExtra   RecipeFamily? @relation("ExtraUsage", fields: [linkedExtraId], references: [id], onDelete: SetNull)
}

// 原料与库存模型
// ==============================================================================

// 原料品类
model Ingredient {
  id                String                     @id @default(uuid())
  tenantId          String
  tenant            Tenant                     @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  name              String
  type              IngredientType             @default(STANDARD)
  activeSkuId       String?                    @unique // [V2.1] 优化: 重命名 defaultSkuId, 含义更清晰
  activeSku         IngredientSKU?             @relation("ActiveSKU", fields: [activeSkuId], references: [id], onDelete: NoAction)
  deletedAt         DateTime?
  skus              IngredientSKU[]            @relation("IngredientSKUs")
  consumptionLogs   IngredientConsumptionLog[]

  @@unique([tenantId, name])
}

// 原料SKU
model IngredientSKU {
  id                      String                     @id @default(uuid())
  brand                   String?
  specName                String
  specWeightInGrams       Float
  status                  SkuStatus                  @default(INACTIVE) // [V2.1] 新增: SKU状态
  currentStockInGrams     Float                      @default(0) // [V2.1] 新增: 实时库存
  currentPricePerPackage  Decimal                    @default(0) // [V2.1] 新增: 当前单价
  ingredientId            String
  ingredient              Ingredient                 @relation("IngredientSKUs", fields: [ingredientId], references: [id], onDelete: Cascade)
  procurementRecords      ProcurementRecord[]
  consumptionLogs         IngredientConsumptionLog[]
  activeForIngredient     Ingredient?                @relation("ActiveSKU")
}

// 采购记录
model ProcurementRecord {
  id                String        @id @default(uuid())
  skuId             String
  sku               IngredientSKU @relation(fields: [skuId], references: [id], onDelete: Cascade)
  packagesPurchased Int
  pricePerPackage   Decimal
  purchaseDate      DateTime      @default(now())
}

// 生产与消耗模型
// ==============================================================================

// 生产任务
model ProductionTask {
  id          String                 @id @default(uuid())
  tenantId    String
  tenant      Tenant                 @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  productId   String // [V2.1] 优化: 设为必需，移除 recipeVersionId
  product     Product                @relation(fields: [productId], references: [id], onDelete: Cascade) // [V2.1] 优化: 关联设为必需
  quantity    Float
  unit        String
  status      ProductionTaskStatus   @default(PENDING)
  plannedDate DateTime
  notes       String?
  deletedAt   DateTime?
  log         ProductionLog?
}

// 生产日志
model ProductionLog {
  id              String                       @id @default(uuid())
  taskId          String                       @unique
  task            ProductionTask               @relation(fields: [taskId], references: [id], onDelete: Cascade)
  actualQuantity  Float
  completedAt     DateTime                     @default(now())
  notes           String?
  consumptionLogs IngredientConsumptionLog[]
}

// 原料消耗日志
model IngredientConsumptionLog {
  id              String        @id @default(uuid())
  productionLogId String
  productionLog   ProductionLog @relation(fields: [productionLogId], references: [id], onDelete: Cascade)
  ingredientId    String
  ingredient      Ingredient    @relation(fields: [ingredientId], references: [id], onDelete: Restrict)
  skuId           String?
  sku             IngredientSKU? @relation(fields: [skuId], references: [id], onDelete: SetNull)
  quantityInGrams Float
}

// 枚举定义
// ==============================================================================
enum Role {
  OWNER
  ADMIN
  MEMBER
  SUPER_ADMIN
}

enum UserStatus {
  ACTIVE
  INACTIVE
  PENDING
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  DECLINED
  EXPIRED
}

enum ProductionTaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum IngredientType {
  STANDARD
  UNTRACKED
}

enum RecipeType {
  MAIN
  PRE_DOUGH
  EXTRA
}

enum ProductIngredientType {
  MIX_IN
  FILLING
  TOPPING
}

// [V2.1] 新增
enum SkuStatus {
  ACTIVE
  INACTIVE
}
