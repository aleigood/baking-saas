// prisma/schema.prisma (Version 10.1 - Fixed relations)

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// --- Enums ---
enum IngredientType {
  STANDARD
  UNTRACKED
}

enum Role {
  OWNER
  MANAGER
  BAKER
}

enum UserStatusInTenant {
  ACTIVE
  INACTIVE
}

enum AddOnType {
  FILLING
  TOPPING
}

enum ProductionTaskStatus {
  IN_PROGRESS
  COMPLETED
  CANCELED
}

// --- Core Models ---

model Tenant {
  id              String           @id @default(uuid())
  name            String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  users           TenantUser[]
  recipeFamilies  RecipeFamily[]
  ingredients     Ingredient[]
  extras          Extra[]
  productionTasks ProductionTask[]
  invitations     Invitation[]
}

model User {
  id            String   @id @default(uuid())
  name          String
  wechatOpenId  String?  @unique
  email         String?  @unique
  passwordHash  String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  tenants       TenantUser[]
  tasks         ProductionTask[]
  createdInvitations Invitation[] // [核心修复] 添加此行以完成与 Invitation 模型的关系
}

model TenantUser {
  role      Role                @default(BAKER)
  status    UserStatusInTenant  @default(ACTIVE)
  createdAt DateTime            @default(now())
  tenantId  String
  userId    String
  tenant    Tenant @relation(fields: [tenantId], references: [id])
  user      User   @relation(fields: [userId], references: [id])
  @@id([tenantId, userId])
}

model Invitation {
  id        String   @id @default(cuid())
  code      String   @unique
  expiresAt DateTime
  tenantId  String
  tenant    Tenant   @relation(fields: [tenantId], references: [id])
  creatorId String
  creator   User     @relation(fields: [creatorId], references: [id])
  createdAt DateTime @default(now())
}

model Ingredient {
  id                 String              @id @default(uuid())
  name               String
  hydration          Float?
  type               IngredientType      @default(STANDARD)
  defaultSkuId       String?
  defaultSku         IngredientSKU?      @relation("DefaultSKU", fields: [defaultSkuId], references: [id])
  tenantId           String
  tenant             Tenant              @relation(fields: [tenantId], references: [id])
  skus               IngredientSKU[]
  doughIngredients   DoughIngredient[]
  productMixIns      ProductMixIn[]
  extraIngredients   ExtraIngredient[]
  consumptionRecords ConsumptionRecord[]
  @@unique([tenantId, name])
}

model IngredientSKU {
  id                    String              @id @default(uuid())
  brand                 String?
  specName              String
  specWeightInGrams     Float
  ingredientId          String
  ingredient            Ingredient          @relation(fields: [ingredientId], references: [id])
  procurementRecords    ProcurementRecord[]
  defaultForIngredients Ingredient[]        @relation("DefaultSKU")
  @@unique([ingredientId, brand, specName])
}

model ProcurementRecord {
  id                String        @id @default(uuid())
  packagesPurchased Int
  pricePerPackage   Decimal
  purchaseDate      DateTime      @default(now())
  skuId             String
  sku               IngredientSKU @relation(fields: [skuId], references: [id])
}

model ProductionTask {
  id                 String               @id @default(uuid())
  status             ProductionTaskStatus @default(IN_PROGRESS)
  plannedQuantity    Int
  createdAt          DateTime             @default(now())
  completedAt        DateTime?
  tenantId           String
  tenant             Tenant               @relation(fields: [tenantId], references: [id])
  productId          String
  product            Product              @relation(fields: [productId], references: [id])
  creatorId          String
  creator            User                 @relation(fields: [creatorId], references: [id])
  consumptionRecords ConsumptionRecord[]
}

model ConsumptionRecord {
  id                    String     @id @default(uuid())
  amountConsumedInGrams Float
  taskId                String
  task                  ProductionTask @relation(fields: [taskId], references: [id])
  ingredientId          String
  ingredient            Ingredient @relation(fields: [ingredientId], references: [id])
}

model RecipeFamily {
  id         String      @id @default(uuid())
  name       String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  tenantId   String
  tenant     Tenant      @relation(fields: [tenantId], references: [id])
  doughs     Dough[]
  products   Product[]
  procedures Procedure[]
}

model Dough {
  id             String            @id @default(uuid())
  name           String
  isPreDough     Boolean           @default(false)
  targetTemp     Float?
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  recipeFamilyId String
  recipeFamily   RecipeFamily      @relation(fields: [recipeFamilyId], references: [id])
  ingredients    DoughIngredient[]
}

model Product {
  id             String         @id @default(uuid())
  name           String
  weight         Float
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  recipeFamilyId String
  recipeFamily   RecipeFamily   @relation(fields: [recipeFamilyId], references: [id])
  mixIns         ProductMixIn[]
  addOns         ProductAddOn[]
  procedures     Procedure[]
  tasks          ProductionTask[]
}

model Extra {
  id            String            @id @default(uuid())
  name          String
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  tenantId      String
  tenant        Tenant            @relation(fields: [tenantId], references: [id])
  ingredients   ExtraIngredient[]
  productAddOns ProductAddOn[]
  @@unique([tenantId, name])
}

model Procedure {
  id             String        @id @default(uuid())
  step           Int
  name           String
  description    String
  recipeFamilyId String?
  recipeFamily   RecipeFamily? @relation(fields: [recipeFamilyId], references: [id])
  productId      String?
  product        Product?      @relation(fields: [productId], references: [id])
}

// --- Relation Tables ---

model DoughIngredient {
  ratio        Float
  isFlour      Boolean    @default(false)
  doughId      String
  ingredientId String
  dough        Dough      @relation(fields: [doughId], references: [id])
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id])
  @@id([doughId, ingredientId])
}

model ProductMixIn {
  ratio        Float
  productId    String
  ingredientId String
  product      Product    @relation(fields: [productId], references: [id])
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id])
  @@id([productId, ingredientId])
}

model ProductAddOn {
  weight    Float
  type      AddOnType  @default(FILLING)
  productId String
  extraId   String
  product   Product    @relation(fields: [productId], references: [id])
  extra     Extra      @relation(fields: [extraId], references: [id])
  @@id([productId, extraId, type])
}

model ExtraIngredient {
  ratio        Float
  extraId      String
  ingredientId String
  extra        Extra      @relation(fields: [extraId], references: [id])
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id])
  @@id([extraId, ingredientId])
}
