// prisma/schema.prisma (Version 11.3 - Add User Status)
// 数据库提供商和连接 URL
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Prisma 客户端生成器
generator client {
  provider = "prisma-client-js"
}

// --- Enums ---
enum TenantStatus {
  ACTIVE
  INACTIVE
}

// [新增] 用户全局状态枚举
enum UserStatus {
  ACTIVE
  INACTIVE
}

enum SystemRole {
  SUPER_ADMIN
}

enum IngredientType {
  STANDARD
  UNTRACKED
}

enum Role {
  OWNER
  MANAGER
  BAKER
}

enum UserStatusInTenant {
  ACTIVE
  INACTIVE
}

enum AddOnType {
  FILLING
  TOPPING
}

enum ProductionTaskStatus {
  IN_PROGRESS
  COMPLETED
  CANCELED
}

// --- Core Models ---

model Tenant {
  id              String           @id @default(uuid())
  name            String
  status          TenantStatus     @default(ACTIVE)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  users           TenantUser[]
  recipeFamilies  RecipeFamily[]
  ingredients     Ingredient[]
  extras          Extra[]
  productionTasks ProductionTask[]
  invitations     Invitation[]
}

model User {
  id                 String       @id @default(uuid())
  name               String
  systemRole         SystemRole?
  status             UserStatus   @default(ACTIVE) // [新增] 用户全局状态
  wechatOpenId       String?      @unique
  email              String?      @unique
  passwordHash       String?
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
  tenants            TenantUser[]
  tasks              ProductionTask[]
  createdInvitations Invitation[]
}

model TenantUser {
  role      Role               @default(BAKER)
  status    UserStatusInTenant @default(ACTIVE)
  createdAt DateTime           @default(now())
  tenantId  String
  userId    String
  tenant    Tenant             @relation(fields: [tenantId], references: [id])
  user      User               @relation(fields: [userId], references: [id])

  @@id([tenantId, userId])
}

model Invitation {
  id        String   @id @default(cuid())
  code      String   @unique
  expiresAt DateTime
  tenantId  String
  tenant    Tenant   @relation(fields: [tenantId], references: [id])
  creatorId String
  creator   User     @relation(fields: [creatorId], references: [id])
  createdAt DateTime @default(now())
}

model Ingredient {
  id                      String              @id @default(uuid())
  name                    String
  hydration               Float? // 原料含水率
  type                    IngredientType      @default(STANDARD)
  defaultSkuId            String? // 默认使用的SKU ID
  defaultSku              IngredientSKU?      @relation("DefaultSKU", fields: [defaultSkuId], references: [id])
  tenantId                String
  tenant                  Tenant              @relation(fields: [tenantId], references: [id])
  skus                    IngredientSKU[]
  doughIngredients        DoughIngredient[]
  productMixIns           ProductMixIn[]
  extraIngredients        ExtraIngredient[]
  consumptionRecords      ConsumptionRecord[]

  @@unique([tenantId, name])
}

model IngredientSKU {
  id                    String              @id @default(uuid())
  brand                 String?
  specName              String
  specWeightInGrams     Float
  ingredientId          String
  ingredient            Ingredient          @relation(fields: [ingredientId], references: [id])
  procurementRecords    ProcurementRecord[]
  defaultForIngredients Ingredient[]        @relation("DefaultSKU")

  @@unique([ingredientId, brand, specName])
}

model ProcurementRecord {
  id                String        @id @default(uuid())
  packagesPurchased Int
  pricePerPackage   Decimal
  purchaseDate      DateTime      @default(now())
  skuId             String
  sku               IngredientSKU @relation(fields: [skuId], references: [id])
}

model ProductionTask {
  id                 String               @id @default(uuid())
  status             ProductionTaskStatus @default(IN_PROGRESS)
  plannedQuantity    Int
  createdAt          DateTime             @default(now())
  completedAt        DateTime?
  tenantId           String
  tenant             Tenant               @relation(fields: [tenantId], references: [id])
  productId          String
  product            Product              @relation(fields: [productId], references: [id])
  creatorId          String
  creator            User                 @relation(fields: [creatorId], references: [id])
  consumptionRecords ConsumptionRecord[]
}

model ConsumptionRecord {
  id                    String     @id @default(uuid())
  amountConsumedInGrams Float
  taskId                String
  task                  ProductionTask @relation(fields: [taskId], references: [id])
  ingredientId          String
  ingredient            Ingredient @relation(fields: [ingredientId], references: [id])
}

// --- 配方模型 ---

model RecipeFamily {
  id        String          @id @default(uuid())
  name      String
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  tenantId  String
  tenant    Tenant          @relation(fields: [tenantId], references: [id])
  versions  RecipeVersion[]
}

model RecipeVersion {
  id             String      @id @default(uuid())
  versionNumber  Int
  name           String // e.g., "夏季版", "2025新版"
  isActive       Boolean     @default(true)
  createdAt      DateTime    @default(now())
  recipeFamilyId String
  recipeFamily   RecipeFamily @relation(fields: [recipeFamilyId], references: [id])
  doughs         Dough[]
  products       Product[]
  procedures     Procedure[]

  @@unique([recipeFamilyId, versionNumber]) // 确保同一家族下版本号唯一
}

model Dough {
  id              String            @id @default(uuid())
  name            String
  isPreDough      Boolean           @default(false)
  targetTemp      Float?
  lossRatio       Float             @default(0) // 生产损耗率
  recipeVersionId String
  recipeVersion   RecipeVersion     @relation(fields: [recipeVersionId], references: [id])
  ingredients     DoughIngredient[]
}

model Product {
  id              String         @id @default(uuid())
  name            String
  weight          Float
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  recipeVersionId String
  recipeVersion   RecipeVersion  @relation(fields: [recipeVersionId], references: [id])
  mixIns          ProductMixIn[]
  addOns          ProductAddOn[]
  procedures      Procedure[]
  tasks           ProductionTask[]
}

model Extra {
  id            String            @id @default(uuid())
  name          String
  lossRatio     Float             @default(0) // 生产损耗率
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  tenantId      String
  tenant        Tenant            @relation(fields: [tenantId], references: [id])
  ingredients   ExtraIngredient[]
  productAddOns ProductAddOn[]

  @@unique([tenantId, name])
}

model Procedure {
  id              String         @id @default(uuid())
  step            Int
  name            String
  description     String
  recipeVersionId String?
  recipeVersion   RecipeVersion? @relation(fields: [recipeVersionId], references: [id])
  productId       String?
  product         Product?       @relation(fields: [productId], references: [id])
}

// --- Relation Tables ---

model DoughIngredient {
  ratio        Float
  isFlour      Boolean    @default(false)
  doughId      String
  ingredientId String
  dough        Dough      @relation(fields: [doughId], references: [id])
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id])

  @@id([doughId, ingredientId])
}

model ProductMixIn {
  ratio        Float
  productId    String
  ingredientId String
  product      Product    @relation(fields: [productId], references: [id])
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id])

  @@id([productId, ingredientId])
}

model ProductAddOn {
  weight    Float
  type      AddOnType  @default(FILLING)
  productId String
  extraId   String
  product   Product    @relation(fields: [productId], references: [id])
  extra     Extra      @relation(fields: [extraId], references: [id])

  @@id([productId, extraId, type])
}

model ExtraIngredient {
  ratio        Float
  extraId      String
  ingredientId String
  extra        Extra      @relation(fields: [extraId], references: [id])
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id])

  @@id([extraId, ingredientId])
}